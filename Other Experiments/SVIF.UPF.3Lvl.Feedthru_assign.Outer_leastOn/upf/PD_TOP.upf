#********************************************************************************
#                                                                                
#       Nordic Semiconductor ASA, Otto Nielsens veg 12, N-7052, NORWAY           
#                                                                                
#********************************************************************************
# Project     : 
# Designer    : Loevvig, Vegard
# Date        : 13/06/2017
# Author      : Loevvig, Vegard
# Description : UPF for a simple design
#               Scopes:
#               TOP		PD_TOP
#               	M1	PD_M1
#               	M2	PD_M2                    
#               	M3	PD_M3 
#               Copyright (c) 2017 by Nordic Semiconductor ASA                   
#********************************************************************************

######################################################################
## Initial Setup
######################################################################

upf_version 2.0

# Synopsys specific attribute (low_domain_boundary is default in Questa for UPF 2.0)
set_design_attributes -elements {.} -attribute lower_domain_boundary true

set_design_attributes -elements {.} -attribute conservative_diff_supply_only_isolation true

# UPF directory is set relative to this directory 
set UPF_DIR      [file dirname [info script]]

# Load procs 
source $UPF_DIR/nic_utils.upf

# Declare PDs
set PD_M1	PD_M1
set PD_M2	PD_M2
set PD_M3	PD_M3
set PD_PS	PD_PS
set PD_TOP	PD_TOP 

######################################################################
## Top-level Power Supply Network
######################################################################

# For every supply, create a supply_net and a supply_port and connect them
foreach supply {VSS DVDD_1V0} {
	create_supply_net 	$supply 
	create_supply_port	$supply
	connect_supply_net	$supply -ports $supply
}

foreach supply {DVDD_M1_1V0 DVDD_M2_1V0 DVDD_M3_1V0 DVDD_M4_1V0 DVDD_M5_1V0} {
	create_supply_net 	$supply 
	create_supply_port	$supply -direction out
	connect_supply_net	$supply -ports $supply
} 

# Create supply sets to connect design elements to both power and ground 
create_supply_set SS_TOP	-function {power DVDD_1V0}	-function {ground VSS}
create_supply_set SS_M1		-function {power DVDD_M1_1V0}	-function {ground VSS}
create_supply_set SS_M2 	-function {power DVDD_M2_1V0}	-function {ground VSS}
create_supply_set SS_M3 	-function {power DVDD_M3_1V0}	-function {ground VSS}
create_supply_set SS_M4 	-function {power DVDD_M4_1V0}	-function {ground VSS}
create_supply_set SS_M5 	-function {power DVDD_M5_1V0}	-function {ground VSS}

######################################################################
## Hierarchical UPF Setup
## Load Module UPF Files
######################################################################

# Load sub scoped upf
# PD_M1 & PD_M4 
load_upf ${UPF_DIR}/${PD_M1}.upf	-scope u_m1

# PD_M2
load_upf ${UPF_DIR}/${PD_M2}.upf	-scope u_m2

# PD_M3 & PD_M5
load_upf ${UPF_DIR}/${PD_M3}.upf	-scope u_m3

# Connect sub scopes to supplies
# PD_M1 & PD_M4 
foreach supply {VSS DVDD_1V0 DVDD_M1_1V0 DVDD_M2_1V0 DVDD_M3_1V0 DVDD_M4_1V0 DVDD_M5_1V0} {
	connect_supply_net	$supply -ports [list u_m1/$supply]
}

# PD_M2
foreach supply {VSS DVDD_1V0 DVDD_M1_1V0 DVDD_M2_1V0 DVDD_M3_1V0 DVDD_M4_1V0 DVDD_M5_1V0} {
	connect_supply_net	$supply -ports [list u_m2/$supply]
}

# PD_M3 & PD_M5
foreach supply {VSS DVDD_1V0 DVDD_M1_1V0 DVDD_M2_1V0 DVDD_M3_1V0 DVDD_M4_1V0 DVDD_M5_1V0} {
	connect_supply_net	$supply -ports [list u_m3/$supply]
}

######################################################################
## Create Top-level PD
######################################################################

# Create top-level power domain and connect it to top supply set
create_power_domain ${PD_TOP}				\
	-supply {primary SS_TOP}	

######################################################################
## Set Port Attributes 
######################################################################

if {[info exist VCLP] == 0} {
	set_port_attributes -elements { . } -applies_to outputs -receiver_supply SS_TOP
	set_port_attributes -elements { . } -applies_to inputs -driver_supply SS_TOP
}

######################################################################
## Low Power Strategy 
######################################################################

#---------------------------
#- Isolation
#---------------------------

if {[info exist VCLP] == 0} {
	nic_set_source_input_isolation_policy	M5	TOP	isolateM2
	#nic_set_elements_isolation_policy	M2	TOP	"out1 out2" isolateM2
}

#---------------------------
#- Power states - Supply sets
#---------------------------

load_upf ${UPF_DIR}/${PD_PS}.upf

#---------------------------
#- Power states - Power domains
#---------------------------

if {[info exist synopsys_program_name] == 0} {
	add_power_state -domain PD_TOP					\
	-state	NORMAL_MODE	{-logic_expr 	{(SS_TOP ==  ON) &&	\
			 			 (SS_M1  ==  ON) &&	\
			 			 (SS_M2  ==  ON) &&	\
			 			 (SS_M3  ==  ON) &&	\
			 			 (SS_M4  ==  ON) &&	\
			 			 (SS_M5	 ==  ON) }}	\
	-state	IDLE_MODE	{-logic_expr	{(SS_TOP ==  ON) &&	\
			 			 (SS_M1  == OFF) &&	\
			 			 (SS_M2  == OFF) &&	\
			 			 (SS_M3  == OFF) &&	\
			 			 (SS_M4  == OFF) &&	\
			 			 (SS_M5	 == OFF) }}	\
	-state	LOWPOWER_MODE	{-logic_expr 	{(SS_TOP ==  ON) &&	\
			 			 (SS_M1  == OFF) &&	\
			 			 (SS_M2  ==  ON) &&	\
			 			 (SS_M3  ==  ON) &&	\
			 			 (SS_M4  ==  ON) &&	\
			 			 (SS_M5	 ==  ON) }}	\
	-state	LOWPOWER_MODE2	{-logic_expr	{(SS_TOP ==  ON) &&	\
			 			 (SS_M1  == OFF) &&	\
			 			 (SS_M2  == OFF) &&	\
			 			 (SS_M3  == OFF) &&	\
			 			 (SS_M4  ==  ON) &&	\
			 			 (SS_M5	 ==  ON) }}	
} else {
	create_power_state_group GTOP
	add_power_state -group GTOP					\
	-state	NORMAL_MODE	{-logic_expr 	{(SS_TOP ==  ON) &&	\
			 			 (SS_M1  ==  ON) &&	\
			 			 (SS_M2  ==  ON) &&	\
			 			 (SS_M3  ==  ON) &&	\
			 			 (SS_M4  ==  ON) &&	\
			 			 (SS_M5	 ==  ON) }}	\
	-state	IDLE_MODE	{-logic_expr	{(SS_TOP ==  ON) &&	\
			 			 (SS_M1  == OFF) &&	\
			 			 (SS_M2  == OFF) &&	\
			 			 (SS_M3  == OFF) &&	\
			 			 (SS_M4  == OFF) &&	\
			 			 (SS_M5	 == OFF) }}	\
	-state	LOWPOWER_MODE	{-logic_expr 	{(SS_TOP ==  ON) &&	\
			 			 (SS_M1  == OFF) &&	\
			 			 (SS_M2  == OFF) &&	\
			 			 (SS_M3  ==  ON) &&	\
			 			 (SS_M4  ==  ON) &&	\
			 			 (SS_M5	 ==  ON) }}	\
	-state	LOWPOWER_MODE2	{-logic_expr	{(SS_TOP ==  ON) &&	\
			 			 (SS_M1  == OFF) &&	\
			 			 (SS_M2  == OFF) &&	\
			 			 (SS_M3  == OFF) &&	\
			 			 (SS_M4  ==  ON) &&	\
			 			 (SS_M5	 ==  ON) }}	
}

